Index: src/main/java/eus/ehu/gleonis/gleonismastodonfx/api/API.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eus.ehu.gleonis.gleonismastodonfx.api;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.google.gson.stream.JsonReader;\r\nimport eus.ehu.gleonis.gleonismastodonfx.PropertiesManager;\r\nimport eus.ehu.gleonis.gleonismastodonfx.api.adapter.MediaAttachmentTypeDeserializer;\r\nimport eus.ehu.gleonis.gleonismastodonfx.api.adapter.NotificationTypeDeserializer;\r\nimport eus.ehu.gleonis.gleonismastodonfx.api.adapter.VisibilityDeserializer;\r\nimport eus.ehu.gleonis.gleonismastodonfx.api.apistruct.*;\r\nimport javafx.collections.ObservableList;\r\nimport okhttp3.*;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.Reader;\r\n\r\npublic class API {\r\n\r\n    private final PropertiesManager propertiesManager;\r\n\r\n    private final Gson gson;\r\n\r\n    private final OkHttpClient client;\r\n\r\n    private final Application application;\r\n\r\n    private String token;\r\n\r\n    private APIError error;\r\n\r\n    public API() {\r\n        GsonBuilder builder = new GsonBuilder();\r\n        builder.registerTypeAdapter(Visibility.class, new VisibilityDeserializer());\r\n        builder.registerTypeAdapter(MediaAttachmentType.class, new MediaAttachmentTypeDeserializer());\r\n        builder.registerTypeAdapter(NotificationType.class, new NotificationTypeDeserializer());\r\n\r\n        gson = builder.create();\r\n        client = new OkHttpClient();\r\n\r\n        propertiesManager = PropertiesManager.getInstance();\r\n        if (propertiesManager.getClientID().isEmpty() || propertiesManager.getClientSecret().isEmpty())\r\n            throw new RuntimeException(\"Client ID and Client Secret are not set in config.properties file.\");\r\n\r\n        application = new Application(propertiesManager.getClientID(), propertiesManager.getClientSecret());\r\n\r\n        token = propertiesManager.getToken();\r\n    }\r\n\r\n    public boolean errorOccurred() {\r\n        return error != null;\r\n    }\r\n\r\n    public APIError getError() {\r\n        return error;\r\n    }\r\n\r\n    //*******************************************************************\r\n    // OAuth methods to authorize user, get and revoke tokens.\r\n    //\r\n    // The autizeUser method opens the browser to the authorization page of mastodon\r\n    // then the user will connect to mastodon and allow or not the application to\r\n    // access to his account. If he accept, he will receive a code.\r\n    //\r\n    // This code then needs to be passed to the function getToken().\r\n    // It will return a Token object with the access token and other information.\r\n    // The access token is then used to setup the API with setupAPI().\r\n    // *******************************************************************\r\n    public String getAuthorizeUserURL() {\r\n        return \"https://mastodon.social/oauth/authorize?response_type=code&client_id=\" +\r\n                application.getClientId() + \"&redirect_uri=urn:ietf:wg:oauth:2.0:oob&scope=read+write+push+follow\";\r\n    }\r\n\r\n    public Token getToken(String code) {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(\"client_id\", application.getClientId())\r\n                .add(\"client_secret\", application.getClientSecret())\r\n                .add(\"redirect_uri\", \"urn:ietf:wg:oauth:2.0:oob\")\r\n                .add(\"grant_type\", \"authorization_code\")\r\n                .add(\"code\", code)\r\n                .add(\"scope\", \"read write push follow\")\r\n                .build();\r\n\r\n        return postSingle(\"oauth/token\", Token.class, body);\r\n    }\r\n\r\n    public void revokeToken(Token token) {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(\"client_id\", application.getClientId())\r\n                .add(\"client_secret\", application.getClientSecret())\r\n                .add(\"token\", token.getAccessToken())\r\n                .build();\r\n\r\n        request(\"oauth/revoke\", \"POST\", body);\r\n    }\r\n\r\n    public boolean isUserConnected() {\r\n        return token != null && !token.isEmpty();\r\n    }\r\n\r\n    public void setupToken(Token token) {\r\n        this.token = token.getAccessToken();\r\n        propertiesManager.setToken(token.getAccessToken());\r\n    }\r\n\r\n\r\n    //*******************************************************************\r\n    // Account methods:\r\n    // - getAccount\r\n    // - getAccountStatuses: return all statuses posted by the account\r\n    // - getAccountFollowers: return all followers of the account\r\n    // - getAccountFollowing: return all accounts followed by the account\r\n    // - followAccount: follow a given account. Parameters are: id of the account to follow, receiveReblogs and notify\r\n    // - unfollowAccount: unfollow a given account.\r\n    // - blockAccount: block a given account.\r\n    // - unblockAccount: unblock a given account.\r\n    // - muteAccount: mute a given account.\r\n    // - unmuteAccount: unmute a given account.\r\n    // - getBookmarks: return all bookmarks of the account.\r\n    // - getFavourites: return all favourites of the account.\r\n    // - getFollowRequests: return all follow requests of the account.\r\n    // - authorizeFollowRequest: authorize a follow request.\r\n    // - rejectFollowRequest: reject a follow request.\r\n    // - getSuggestions: return all suggestions of the account.\r\n    // - removeSuggestion: remove a suggestion.\r\n    //\r\n    // *******************************************************************\r\n\r\n    /**\r\n     * @return The account of the connected user\r\n     */\r\n    public Account verifyCredentials() {\r\n        return getSingle(\"api/v1/accounts/verify_credentials\", Account.class);\r\n    }\r\n\r\n    /**\r\n     * @param id The id of the account to get\r\n     * @return The account with the given id\r\n     */\r\n    public Account getAccount(String id) {\r\n        return getSingle(\"api/v1/accounts/\" + id, Account.class);\r\n    }\r\n\r\n    public ListStream<Status> getAccountStatuses(String id, int limit) {\r\n        return getStream(\"api/v1/accounts/\" + id + \"/statuses\", limit, Status.class);\r\n    }\r\n\r\n    public ListStream<Status> getBookmarks(int limit) {\r\n        return getStream(\"api/v1/bookmarks\", limit, Status.class);\r\n    }\r\n\r\n    public ListStream<Status> getFavourites(int limit) {\r\n        return getStream(\"api/v1/favourites\", limit, Status.class);\r\n    }\r\n\r\n    public ListStream<Account> getAccountFollowers(String id, int limit) {\r\n        return getStream(\"api/v1/accounts/\" + id + \"/followers\", limit, Account.class);\r\n    }\r\n\r\n    public ListStream<Account> getAccountFollowing(String id, int limit) {\r\n        return getStream(\"api/v1/accounts/\" + id + \"/following\", limit, Account.class);\r\n    }\r\n\r\n    public ListStream<Relationship> getRelationships(String... ids) {\r\n        StringBuilder baseUrl = new StringBuilder(\"api/v1/accounts/relationships?\");\r\n        baseUrl.append(\"id=\").append(ids[0]);\r\n        for (String id : ids)\r\n            baseUrl.append(\"&id=\").append(id);\r\n\r\n        return getStream(baseUrl.toString(), 0, Relationship.class);\r\n    }\r\n\r\n    public Relationship followAccount(String id) {\r\n        return followAccount(id, true, false);\r\n    }\r\n\r\n    public Relationship followAccount(String id, boolean receiveReblogs, boolean notify) {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(\"reblogs\", receiveReblogs ? \"true\" : \"false\")\r\n                .add(\"notify\", notify ? \"true\" : \"false\")\r\n                .build();\r\n\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/follow\", Relationship.class, body);\r\n    }\r\n\r\n    public Relationship unfollowAccount(String id) {\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/unfollow\", Relationship.class);\r\n    }\r\n\r\n    public Relationship removeAccountFromFollowers(String id) {\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/remove_from_followers\", Relationship.class);\r\n    }\r\n\r\n    public Relationship blockAccount(String id) {\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/block\", Relationship.class);\r\n    }\r\n\r\n    public Relationship unblockAccount(String id) {\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/unblock\", Relationship.class);\r\n    }\r\n\r\n    public Relationship muteAccount(String id) {\r\n        return muteAccount(id, true, 0);\r\n    }\r\n\r\n    public Relationship muteAccount(String id, boolean muteNotifications, int duration) {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(\"notifications\", muteNotifications ? \"true\" : \"false\")\r\n                .add(\"duration\", String.valueOf(duration))\r\n                .build();\r\n\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/mute\", Relationship.class, body);\r\n    }\r\n\r\n    public Relationship unmuteAccount(String id) {\r\n        return postSingle(\"api/v1/accounts/\" + id + \"/unmute\", Relationship.class);\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Follow request methods and follow suggestion\r\n    //\r\n    // *******************************************************************\r\n    public ListStream<Account> getFollowRequests(int limit) {\r\n        return getStream(\"api/v1/follow_requests\", limit, Account.class);\r\n    }\r\n\r\n    public Relationship authorizeFollowRequest(String id) {\r\n        return postSingle(\"api/v1/follow_requests/\" + id + \"/authorize\", Relationship.class);\r\n    }\r\n\r\n    public Relationship rejectFollowRequest(String id) {\r\n        return postSingle(\"api/v1/follow_requests/\" + id + \"/reject\", Relationship.class);\r\n    }\r\n\r\n    public ListStream<Suggestion> getSuggestions() {\r\n        return getStream(\"api/v1/suggestions\", 40, Suggestion.class);\r\n    }\r\n\r\n    public void removeSuggestion(String id) {\r\n        deleteRequest(\"api/v1/suggestions/\" + id);\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Statuses methods\r\n    //\r\n    // Remaining one to implement but not very useful:\r\n    // - getStatusContext\r\n    // - getStatusCard\r\n    // - muteConversation and unmuteConversation\r\n    // - pinStatus and unpinStatus\r\n    // - editStatus\r\n    // - viewEditHistory\r\n    // - viewStatusSource\r\n    // *******************************************************************\r\n    public Status postStatus(String status, String inReplyToId, String mediaIds, boolean sensitive, String spoilerText, String visibility) {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(\"status\", status)\r\n                .add(\"in_reply_to_id\", inReplyToId)\r\n                .add(\"media_ids\", mediaIds)\r\n                .add(\"sensitive\", sensitive ? \"true\" : \"false\")\r\n                .add(\"spoiler_text\", spoilerText)\r\n                .add(\"visibility\", visibility)\r\n                .build();\r\n\r\n        return postSingle(\"api/v1/statuses\", Status.class, body);\r\n    }\r\n\r\n    public Status getStatus(String id) {\r\n        return getSingle(\"api/v1/statuses/\" + id, Status.class);\r\n    }\r\n\r\n    public Status deleteStatus(String id) {\r\n        return deleteSingle(\"api/v1/statuses/\" + id, Status.class);\r\n    }\r\n\r\n    public ListStream<Account> getStatusRebloggedBy(String id, int limit) {\r\n        return getStream(\"api/v1/statuses/\" + id + \"/reblogged_by\", limit, Account.class);\r\n    }\r\n\r\n    public ListStream<Account> getStatusFavouritedBy(String id, int limit) {\r\n        return getStream(\"api/v1/statuses/\" + id + \"/favourited_by\", limit, Account.class);\r\n    }\r\n\r\n    public Status favouriteStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/favourite\", Status.class);\r\n    }\r\n\r\n    public Status unfavouriteStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/unfavourite\", Status.class);\r\n    }\r\n\r\n    public Status reblogStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/reblog\", Status.class);\r\n    }\r\n\r\n    public Status unreblogStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/unreblog\", Status.class);\r\n    }\r\n\r\n    public Status bookmarkStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/bookmark\", Status.class);\r\n    }\r\n\r\n    public Status unbookmarkStatus(String id) {\r\n        return postSingle(\"api/v1/statuses/\" + id + \"/unbookmark\", Status.class);\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Trending methods\r\n    //\r\n    // *******************************************************************\r\n    public ListStream<Tag> getTrendingTags(int limit) {\r\n        return getStream(\"api/v1/trends/tags\", limit, Tag.class);\r\n    }\r\n\r\n    public ListStream<Status> getTrendingStatuses(int limit) {\r\n        return getStream(\"api/v1/trends/statuses\", limit, Status.class);\r\n    }\r\n\r\n\r\n    //*******************************************************************\r\n    // HashTag methods\r\n    //\r\n    // *******************************************************************\r\n    public Tag getHashTagInfo(String tag) {\r\n        return getSingle(\"api/v1/tags/\" + tag, Tag.class);\r\n    }\r\n\r\n    public Tag followHashTag(String tag) {\r\n        return postSingle(\"api/v1/tags/\" + tag + \"/follow\", Tag.class);\r\n    }\r\n\r\n    public Tag unfollowHashTag(String tag) {\r\n        return postSingle(\"api/v1/tags/\" + tag + \"/unfollow\", Tag.class);\r\n    }\r\n\r\n\r\n    //*******************************************************************\r\n    // Timelines methods:\r\n    // - getPublicTimelines\r\n    // - getHashTagTimelines: all status that have the given hashtag (without the #)\r\n    // - getHomeTimeline\r\n    //\r\n    // *******************************************************************\r\n    public ListStream<Status> getPublicTimelines(int limit, boolean onlyLocal, boolean onlyRemote) {\r\n        return getStream(\"api/v1/timelines/public?local=\" + onlyLocal + \"&remote=\" + onlyRemote, limit, Status.class);\r\n    }\r\n\r\n    public ListStream<Status> getHashTagTimelines(String tag, int limit) {\r\n        return getStream(\"api/v1/timelines/tag/\" + tag, limit, Status.class);\r\n    }\r\n\r\n    public ListStream<Status> getHomeTimeline(int limit) {\r\n        return getStream(\"api/v1/timelines/home\", limit, Status.class);\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Conversations methods:\r\n    // - getConversations\r\n    // - removeConversation\r\n    // - markedConversationAsRead\r\n    //\r\n    // *******************************************************************\r\n    public ListStream<Conversation> getConversations(int limit) {\r\n        return getStream(\"api/v1/conversations\", limit, Conversation.class);\r\n    }\r\n\r\n    public void removeConversation(String id) {\r\n        deleteRequest(\"api/v1/conversations/\" + id);\r\n    }\r\n\r\n    public Conversation markedConversationAsRead(String id) {\r\n        return postSingle(\"api/v1/conversations/\" + id + \"/read\", Conversation.class);\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Notification methods:\r\n    //\r\n    // *******************************************************************\r\n    public ListStream<Notification> getNotifications(int limit) {\r\n        return getStream(\"api/v1/notifications\", limit, Notification.class);\r\n    }\r\n\r\n    public Notification getNotification(String id) {\r\n        return getSingle(\"api/v1/notifications/\" + id, Notification.class);\r\n    }\r\n\r\n    public void clearNotifications() {\r\n        postSingle(\"api/v1/notifications/clear\", Notification.class);\r\n    }\r\n\r\n    public void dismissNotification(String id) {\r\n        postSingle(\"api/v1/notifications/\" + id + \"/dismiss\", Notification.class);\r\n    }\r\n\r\n\r\n    //*******************************************************************\r\n    // Web sockets\r\n    //\r\n    // *******************************************************************\r\n\r\n\r\n    //*******************************************************************\r\n    // Stream Utils methods\r\n    //\r\n    // *******************************************************************\r\n    protected <E> void updateStream(String baseUrl, int limit, Class<E> objClass, ListStream<E> listStream) {\r\n        String url = baseUrl + (baseUrl.contains(\"?\") ? \"&\" : \"?\") + \"limit=\" + limit;\r\n\r\n        RequestResult requestResult = getRequest(url);\r\n        listStream.parsePaginationLink(requestResult.paginationLink());\r\n        if (errorOccurred())\r\n            return;\r\n\r\n        readArraysFromJson(requestResult.response(), objClass, listStream.getElement());\r\n    }\r\n\r\n    private <E> ListStream<E> getStream(String baseUrl, int limit, Class<E> objClass) {\r\n        String url = baseUrl + (baseUrl.contains(\"?\") ? \"&\" : \"?\") + \"limit=\" + limit;\r\n\r\n        RequestResult requestResult = getRequest(url);\r\n        if (errorOccurred())\r\n            return null;\r\n\r\n        ListStream<E> listStream = new ListStream<>(this, baseUrl, requestResult.paginationLink());\r\n\r\n        readArraysFromJson(requestResult.response(), objClass, listStream.getElement());\r\n\r\n        return listStream;\r\n    }\r\n\r\n    private <E> E getSingle(String url, Class<E> objClass) {\r\n        RequestResult requestResult = getRequest(url);\r\n        if (errorOccurred())\r\n            return null;\r\n\r\n        return readSingleFromJson(requestResult.response(), objClass);\r\n    }\r\n\r\n    private <E> E deleteSingle(String url, Class<E> objClass) {\r\n        RequestResult requestResult = deleteRequest(url);\r\n        if (errorOccurred())\r\n            return null;\r\n\r\n        return readSingleFromJson(requestResult.response(), objClass);\r\n    }\r\n\r\n    private <E> E postSingle(String url, Class<E> objClass) {\r\n        return postSingle(url, objClass, new FormBody.Builder().build());\r\n    }\r\n\r\n    private <E> E postSingle(String url, Class<E> objClass, RequestBody body) {\r\n        RequestResult requestResult = request(url, \"POST\", body);\r\n        if (errorOccurred())\r\n            return null;\r\n\r\n        return readSingleFromJson(requestResult.response(), objClass);\r\n    }\r\n\r\n    private <E> E putSingle(String url, Class<E> objClass, RequestBody body) {\r\n        RequestResult requestResult = request(url, \"PUT\", body);\r\n        if (errorOccurred())\r\n            return null;\r\n\r\n        return readSingleFromJson(requestResult.response(), objClass);\r\n    }\r\n\r\n    private <E> void readArraysFromJson(Reader r, Class<E> objClass, ObservableList<E> list) {\r\n        try (JsonReader reader = new JsonReader(new BufferedReader(r))) {\r\n            reader.beginArray();\r\n\r\n            while (reader.hasNext())\r\n                list.add(gson.fromJson(reader, objClass));\r\n\r\n            reader.endArray();\r\n        } catch (IOException e) {\r\n            error = new APIError(0, e.getMessage());\r\n        }\r\n    }\r\n\r\n    private <E> E readSingleFromJson(Reader r, Class<E> objClass) {\r\n        E element = null;\r\n        try (JsonReader reader = new JsonReader(new BufferedReader(r))) {\r\n            element = gson.fromJson(reader, objClass);\r\n        } catch (IOException e) {\r\n            error = new APIError(0, e.getMessage());\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    //*******************************************************************\r\n    // Utilitary methods for request building and execution.\r\n    //\r\n    // *******************************************************************\r\n    private RequestResult getRequest(String endpoint) {\r\n        return request(endpoint, \"GET\", null);\r\n    }\r\n\r\n    private RequestResult deleteRequest(String endpoint) {\r\n        return request(endpoint, \"DELETE\", null);\r\n    }\r\n\r\n    private RequestResult request(String url, String method, RequestBody body) {\r\n        error = null;\r\n        RequestResult requestResult;\r\n\r\n        Request request = buildRequest(url, method, body);\r\n\r\n        try {\r\n            // We do not close it since we need to read the response. And when we will read it, it will be closed.\r\n            Response response = client.newCall(request).execute();\r\n            Reader result = response.body() != null ? response.body().charStream() : null;\r\n\r\n            if (!response.isSuccessful())\r\n                error = new APIError(response.code(), response.body().string());\r\n\r\n            requestResult = new RequestResult(result, response.code(), response.header(\"Link\"));\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        return requestResult;\r\n    }\r\n\r\n    private Request buildRequest(String url, String method, RequestBody body) {\r\n        Request.Builder builder = new Request.Builder().url(\"https://mastodon.social/\" + url);\r\n\r\n        if (token != null)\r\n            builder.addHeader(\"Authorization\", \"Bearer \" + token);\r\n\r\n        return builder.method(method, body).build();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/eus/ehu/gleonis/gleonismastodonfx/api/API.java b/src/main/java/eus/ehu/gleonis/gleonismastodonfx/api/API.java
--- a/src/main/java/eus/ehu/gleonis/gleonismastodonfx/api/API.java	(revision 6e7d58546f9c3af6f474c64b34ddf6a0846ac2f7)
+++ b/src/main/java/eus/ehu/gleonis/gleonismastodonfx/api/API.java	(date 1682429427411)
@@ -3,7 +3,7 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.stream.JsonReader;
-import eus.ehu.gleonis.gleonismastodonfx.PropertiesManager;
+import eus.ehu.gleonis.gleonismastodonfx.utils.PropertiesManager;
 import eus.ehu.gleonis.gleonismastodonfx.api.adapter.MediaAttachmentTypeDeserializer;
 import eus.ehu.gleonis.gleonismastodonfx.api.adapter.NotificationTypeDeserializer;
 import eus.ehu.gleonis.gleonismastodonfx.api.adapter.VisibilityDeserializer;
